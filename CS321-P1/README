****************
* Project: P1
* Class: CS321-02
* Date: Jan 24, 2020
* Daniel Rao
**************** 

OVERVIEW:

The program builds cache storage. Level one or level two based on user preference, given that the user provides the size of the cache 


INCLUDED FILES:

The files required for CS321 are: 
Cache.java
Test.java
README


COMPILING AND RUNNING:

The program runs and compiles correctly
 
Compile the class with the given command: 
 $ javac Cache.java
 $ javac Test.java

Command line arguments were used in Test.java to run the command successfully

For selecting 1 as number of caches:
Usage: Java Test [1] [Cache Size] [text file]
Or
For selecting 2 as number of caches: 
Usage: Java Test [2] [Cache Size1] [Cache Size2] [text file]

 Console output will give the results after the program finishes.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:




The program constructs a linked structure of cache, given that user proves the cache size.
If the user selects '1' as his his first parameter, or if the user passes '2' as his first parameter the user would have to input 
Cache one size and cache two size alongside file name.

As the program runs through all the words in the files it stores it in the cache simultaneously.
There are two files. Test.java tests the implementation of cache class and provides the output to the console with useful information such as total number of cache miss, or cache-one miss, to hit points etc.  

Not sure if the program can be improved however it can be made better in context of algorithm may be.



TESTING:

 The testing of the program was done using the test class that was built which processed the file provided by the user.


DISCUSSION:


Understanding the whole algorithm was kind of challenging. The teacher did not provide any description about the homework, so working through it was challenging. Understanding the whole idea of cache was hard itself in the first place. Building the algorithm for second level cache was hard too.
Setting up command Line was another challenge I had to face. To ease up things a little bit. I used the approaching of having more methods where fileReader(param) was made to read and process the file. 
 
After struggling through the project and in trying to understand the functionality by reading the algorithm again and again and walking through using a piece of paper I was able to build the functionality to how things get read into the cache and when there was a cache hit or cache miss.
 
 
EXTRA CREDIT:

There was no extra credit opportunity provided by the teacher.


----------------------------------------------------------------------------

