import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

/*
 * @author Daniel Rao
 */
public class HashTest {

	private static int inputType;
	private static double loadFactor;
	private static int debugLevel;
	private static int hashTableSize;
	private static String dataSource;
	@SuppressWarnings("rawtypes")
	private static HashTable linearProbingt;
	@SuppressWarnings("rawtypes")
	private static HashTable doubleProbingt;

	@SuppressWarnings("rawtypes")
	public static void main(String[] args) throws Exception {

		if (args.length == 3 || args.length == 2) {

			if (args.length == 3) {
				inputType = Integer.parseInt(args[0]);
				loadFactor = Double.parseDouble(args[1]);
				debugLevel = Integer.parseInt(args[2]);

				if (((inputType == 1) || (inputType == 2) || (inputType == 3)) && (debugLevel == 0 || debugLevel == 1)
						&& (loadFactor > 0 && loadFactor < 1)) {

					linearProbingt = new HashTable(HashTable.PROBING_TYPE.LINEAR_HASHING, loadFactor);
					doubleProbingt = new HashTable(HashTable.PROBING_TYPE.DOUBLE_HASHING, loadFactor);
					mainProcess(loadFactor);

					if (debugLevel == 1) {
						fileWriter();
					}

				} else {
					System.err.println(printUsage());
				}

			}
		}

	}

	/**
	 * 
	 * @param loadF takes the load factor and generated the table, passing on values
	 *              depending on the inputType.
	 */

	@SuppressWarnings({ "unchecked" })
	public static void mainProcess(double loadF) {

		if ((loadF > 0 && loadF < 1)) {

			hashTableSize = linearProbingt.getTableSize();

			if (inputType == 1) { // Data Source: Random Integer generated.

				dataSource = "Random Numbers";

				Random rand = new Random();
				// table size are same weather its linearProbingt or doubleProbingt so:

				while (linearProbingt.getCountofsuccessfulInsertion() <= linearProbingt.getTotalExpectedNumberKeys()) {

					int randNumber1 = rand.nextInt();
					try {
						linearProbingt.insert(randNumber1);
						doubleProbingt.insert(randNumber1);
					} catch (Exception e) {
						e.printStackTrace();
					}

				}

				System.out.println(consoleResult());

			}

			else if (inputType == 2) { // Data Source: System current time (millis).

				dataSource = "System current time (millis)";

				while (linearProbingt.getCountofsuccessfulInsertion() <= linearProbingt.getTotalExpectedNumberKeys()) {

					long timeMilli = System.currentTimeMillis();
					try {
						linearProbingt.insert(timeMilli);
						doubleProbingt.insert(timeMilli);
					} catch (Exception e) {
						e.printStackTrace();
					}

				}
				System.out.println(consoleResult());
			}

			else if (inputType == 3) { // Data Source: wordList.

				dataSource = "word-list";
				File file = new File("word-list");
				Scanner scan = null;
				try {

					scan = new Scanner(file);

				} catch (FileNotFoundException e) {

					e.printStackTrace();
				}

				while (linearProbingt.getCountofsuccessfulInsertion() <= linearProbingt.getTotalExpectedNumberKeys()) {

					String str = scan.nextLine();
					try {
						linearProbingt.insert(str);
						doubleProbingt.insert(str);
					} catch (Exception e) {
						e.printStackTrace();
					}

				}

				System.out.println(consoleResult());
				scan.close();

			}

		}

	}

	/**
	 * 
	 * @return error message.
	 */
	public static String printUsage() {
		String errorMessage = "java HashTest <input type> <load factor> [<debug level>]";
		return errorMessage;

	}

	/**
	 * creates and edits the file according to values generated by the program.
	 * 
	 * @throws IOException
	 */
	public static void fileWriter() throws IOException {
		FileWriter fileWriter1 = new FileWriter("linear-dump ", false);
		FileWriter fileWriter2 = new FileWriter("double-dump", false);

		for (int i = 0; i < hashTableSize; i++) {

			if (linearProbingt.getObject(i) != null) {
				fileWriter1.write("table[" + i + "]: " + linearProbingt.getItem(i) + " " + linearProbingt.getDups(i)
						+ " " + linearProbingt.getProbes(i) + "\n");
			}
			if (doubleProbingt.getObject(i) != null) {
				fileWriter2.write("table[" + i + "]: " + doubleProbingt.getItem(i) + " " + doubleProbingt.getDups(i)
						+ " " + doubleProbingt.getProbes(i) + "\n");
			}

		}
		fileWriter1.close();
		fileWriter2.close();
	}

	/**
	 * 
	 * @return returns the output result to the console.
	 */
	public static String consoleResult() {
		double test1 = (double) linearProbingt.getTotalProbes();
		double test2 = (double) linearProbingt.getCountofsuccessfulInsertion();
		double avgProbeslinear = test1 / test2;

		double testA = (double) doubleProbingt.getTotalProbes();
		double testB = (double) doubleProbingt.getCountofsuccessfulInsertion();
		double avgProbesdouble = testA / testB;

		String masterStringdebug0 = "A good table size has been found: " + linearProbingt.getTableSize() + "\n"
				+ "Data source type: " + dataSource + "\n" + "\n" + "Using Linear Hashing....\n" + "Input "
				+ linearProbingt.getInsertionAttempt() + " elements, of which " + linearProbingt.getTotalDuplicates()
				+ " duplicates, " + "\nload factor = " + loadFactor + ", Avg. no. of probes " + avgProbeslinear

				+ "\n\n" + "Using Double Hashing....\n" + "Input " + doubleProbingt.getInsertionAttempt()
				+ " elements, of which " + doubleProbingt.getTotalDuplicates() + " duplicates, " + "\nload factor = "
				+ loadFactor + ", Avg. no. of probes " + avgProbesdouble;

		return masterStringdebug0;

	}

}
