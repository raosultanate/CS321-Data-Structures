****************
* Project: P3
* Class: CS321-02
* Date: April 7, 2020
* Daniel Rao
**************** 

OVERVIEW:

The program builds HashTable. Based on Linear on Linear and double Probing provided a certain load Factor

INCLUDED FILES:

The files required for CS321 are: 
HashTest.java
HashTable.java
HashObject
Results
README


COMPILING AND RUNNING:

The program runs and compiles correctly
 
Compile the class with the given command: 
 $ javac HashTable.java
 $ javac HashTest.java
 $ javac HashObject.java

Command line arguments were used in Test.java to run the command successfully

java HashTest <input type> <load factor> [<debug level>]

Console output will give the results after the program finishes.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

1. Created a Java class called HashObject, which will hold objects in your Hash Table.
• Using generics so that the class can hold objects of any type but maintains type-safety.
• A HashObject contains a generic object, a frequency count (this value is incremented when a value already in the table, i.e., duplicate value) and a probe count
(this value is incremented when a slot in the table is examined).
• Include a constructor.
• Override the following method provided by the Object class: The equals method
returns true if the key and value of two HashObjects are equal.
• Included a getKey method.
• included setters and getters for frequency count and probe count.



2. Created a Java class called HashTable, which represents a Hash Table ADT. It also
keeps track of the number of probes for each HashObject while it is inserted. It should
at least contains the following methods:
• A default constructor: it creates a new HashTable with a default capacity (m) of
95791, a default maximum load factor(α) of 0.75, and a default OpenAddressType
of linear probing.
• A constructor that takes 3 parameters: table size m, load factor α, type of open
addressing such as: “int type”.
• A “put” method. It creates a HashObject instance with the given value and key
and inserts that into the HashTable at the correct index. If a given value
is already in the Hash Table, it is not inserted into the table but its
frequency is incremented.
• A “getLoadFactor” method returns α.
• A “totalDuplicates” method returns the number of times that the put method
found a value already in the table (i.e. the sum of the frequencies of the values).
• A “totalProbes” method returns total number of probes after inserting all elements into the table.
• An “averageProbes” method returns average number probes per element.
• Other methods, getters and setters when they are needed in your design.



3. Created a LinearProbing class that can compute hash function and returns a position
for a HashObject.

4. Created a DoubleHashing class that can compute hash function and returns a position
for a HashObject.

5. Created a driver program called HashTest that runs experiments on your HashTable
class.
• Read in the command-line arguments, doing some basic input verification
• Create two instances of the  HashTable class, one that uses linear probing
and another using double hashing.
• Read in the values in the input file. To determine a key for each value, 
hashCode method was used provided by the Object class.
• Kept inserting elements to both Hash Tables until you the desired load factor has
reached.
• Print the required output to the console, according to the given debug level.



TESTING:

 The testing of the program was done using the HashTest class of which the output was compared to the output and turns out they match perfectly.


DISCUSSION:


Struggled mostly creating the inserting method. That was th most challenging part of this assignment. Most of the other parts were pretty much straight forward. I was running into alot of problems in regards to running into infinite loop. Turns out that it was mostly because the way I had setup my conditions.
This was one of the most fun assignments from this Class.
Enjoyed alot.
 
 
EXTRA CREDIT:

PrimeGenerator was built by me to attempt for the extra 5 points.

----------------------------------------------------------------------------

